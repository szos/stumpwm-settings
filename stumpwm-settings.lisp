;;;; stumpwm-settings.lisp

(in-package #:stumpwm-settings)

;; Generate a defconfig database for stumpwm.
(handler-bind ((defconfig:database-already-exists-error
                 (lambda (c)
                   (let ((r (find-restart 'defconfig::continue c)))
                     (when r
                       (invoke-restart r))))))
  (defconfig:define-defconfig-db *stumpwm-db* :stumpwm
    :doc "defconfig database for stumpwm"))

(defmacro defsetting (place &rest keys)
  "Define a variable config object for PLACE in the stumpwm defconfig database."
  `(defconfig:define-variable-config ,place ,place
     :db *stumpwm-db*
     :regen-config t
     ,@keys))

(defmacro with-typespec (typespec &body variables)
  "Generate a set of DEFSETTING forms for VARIABLES using TYPESPEC as the type"
  (let ((forms (loop for variable in variables
                     collect `(defsetting ,variable :typespec ,typespec))))
    `(progn ,@forms)))

(defun load-customized ()
  "Load the customization file"
  ;; TODO: make this in and of itself customizable.
  (when (uiop:file-exists-p "~/.stumpwm.d/customize-variables.lisp")
    (load "~/.stumpwm.d/customize-variables.lisp")))

(defun customize (symbol value)
  "Set SYMBOL to VALUE if VALUE is valid for SYMBOL."
  (let* ((config-info (car (defconfig:search-configurable-objects symbol
                                                                  :stumpwm)))
         (validated? (and config-info
                          (funcall (defconfig:config-info-predicate config-info)
                                   value))))
    (if validated?
        (progn (stumpwm:call-in-main-thread
                (lambda ()
                  (setf (symbol-value symbol) value)))
               :valid)
        :invalid)))

(defun reset (symbol)
  "Reset SYMBOL to its default value."
  (stumpwm:call-in-main-thread
   (lambda ()
     (defconfig:reset-computed-place symbol :db (defconfig:get-db :stumpwm)))))

(defun generate-set-string (symbol)
  "Generate a printed representation of whatever value SYMBOL has, to be placed
into a SETV form."
  (let ((value (symbol-value symbol)))
    (if (eq t value)
        (format nil "T")
        (typecase value
          (string (format nil "~S" value))
          (number value)
          (null "NIL")
          (keyword (format nil "~S" value))
          (symbol (format nil "'~A" value))
          (cons (format nil "'~S" value))))))

(defun gen-final (place list)
  "Called after writing all modified settings to the custom file. Used for 
anything that must take place after a variable is modified, such as *colors*. "
  (cond ((eql place 'stumpwm:*colors*)
         (cons (format nil "(update-color-map (current-screen))") list))
        (t list)))

(defun write-settings-to-file (&optional (path "~/.stumpwm.d/customize-variables.lisp"))
  "Write all settings to a file iff the setting has been modified from its 
default value. "
  (let ((finalized nil))
    (with-open-file (file path :direction :output
                               :element-type 'character
                               :if-exists :supersede
                               :if-does-not-exist :create)
      (format file ";;;; This file, customize-variables.lisp, was generated by the package~%;;;; stumpwm-settings, and should not be edited. If you edit it by hand,~%;;;; your changes may be overwritten by stumpwm-settings.~%~%")
      (format file "(in-package :stumpwm)~%~%(unless (find-package :stumpwm-settings)~%  (ql:quickload :stumpwm-settings))~%~%(in-package :stumpwm-settings)~%~%(defconfig:setv~%")
      (loop for setting being the hash-value of (cdr stumpwm-settings::*stumpwm-db*)
            for place = (defconfig:config-info-place setting)
            unless (equal (symbol-value place)
                          (defconfig:config-info-default-value setting))
              do (format file "~& ~A ~A~&" place (generate-set-string place))
                 (setf finalized (gen-final place finalized)))
      (format file " :db stumpwm-settings:*stumpwm-db*)~%")
      (loop for final in finalized
            do (format file "~%~A~&" final)))))
